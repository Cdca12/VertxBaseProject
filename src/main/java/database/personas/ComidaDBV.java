/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database.personas;

import database.commons.DBVerticle;
import database.commons.GenericCreate;
import static database.personas.PersonaDBV.REGISTER;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import java.util.ArrayList;
import java.util.List;
import static service.commons.Constants.ACTION;

/**
 *
 * @author sergioc
 */
public class ComidaDBV extends DBVerticle {

    public static final String ADDRESS = "db.comida";
    public static final String REGISTER = "register";

    @Override
    public String getTableName() {
        return "CC_comida";
    }

    @Override
    public String getVerticleAddress() {
        return ADDRESS;
    }
    
    @Override
    protected void onMessage(Message<JsonObject> message) {
        super.onMessage(message);
        String action = message.headers().get(ACTION);
        switch (action) {
            case REGISTER:
                this.registrar(message);
                break;
        }
    }

    private void registrar(Message<JsonObject> message) {
        this.dbClient.getConnection(getCon -> {
            if (getCon.succeeded()) {
                SQLConnection con = getCon.result();
                con.setOptions(new SQLOptions().setAutoGeneratedKeys(true));
                con.setAutoCommit(false, autoCom -> {

                    JsonArray comidas = message.body().getJsonArray("comidas").copy();
                    
                    for (int i = 0; i < comidas.size(); i++) {
                        JsonObject comida = comidas.getJsonObject(i);
                        
                        // Json con los animales_ids
                        JsonObject comidaAux = new JsonObject();
                        comidaAux.put("animales_ids", comida.getJsonArray("animales_ids"));
                        
                        comida.put("created_by", 1);
                        comida.remove("animales_ids");
                        
                        GenericCreate model
                            = this.generateGenericCreate(comida);
                        
                        con.updateWithParams(model.getQuery(), model.getParams(), comidaReply -> {
                            if (comidaReply.succeeded()) {
                                // La comida se insertó, ahora insertar mascotas
                                int comidaId = comidaReply.result().getKeys().getInteger(0);
                                JsonArray animalesIds = comidaAux.getJsonArray("animales_ids");
                                List <String> queries = new ArrayList<>(animalesIds.size());
                                for (int j = 0; j < animalesIds.size(); j++) {
                                    JsonObject animalRelacion = new JsonObject();
                                    int animalId = animalesIds.getInteger(j);
                                    
                                    // Añaden atributos al Json
                                    animalRelacion.put("CC_comida_ID", comidaId);
                                    animalRelacion.put("CC_animal_ID", animalId);
                                    animalRelacion.put("created_by", 1);
                                    
                                    queries.add(this.generateGenericCreate("CC_animales_comidas", animalRelacion));
                                }
                                con.batch(queries, animalesReply -> {
                                    if (animalesReply.succeeded()) {
                                        this.commit(con, message, new JsonObject().put("id", comidaId));
                                    } else {
                                        // rollback
                                        this.rollback(con, animalesReply.cause(), message);
                                    }
                                });
                            }
                            
                        });
                        
                    }
                });
            } else {
                // fallido
                reportQueryError(message, getCon.cause(), REGISTER);
            }
        });
    }

}

