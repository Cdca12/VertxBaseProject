/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database.personas;

import database.commons.DBVerticle;
import database.commons.GenericCreate;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import java.util.ArrayList;
import java.util.List;
import static service.commons.Constants.*;

/**
 *
 * @author sergioc
 */
public class PersonaDBV extends DBVerticle {

    public static final String ADDRESS = "db.persona";
    public static final String REGISTER = "register";

    @Override
    public String getTableName() {
        return "CC_persona";
    }

    @Override
    public String getVerticleAddress() {
        return ADDRESS;
    }

    @Override
    protected void onMessage(Message<JsonObject> message) {
        super.onMessage(message);
        String action = message.headers().get(ACTION);
        switch (action) {
            case REGISTER:
                this.registrar(message);
                break;
        }
    }

    private void registrar(Message<JsonObject> message) {
        this.dbClient.getConnection(getCon -> {
            if (getCon.succeeded()) {
                SQLConnection con = getCon.result();
                con.setOptions(new SQLOptions().setAutoGeneratedKeys(true));
                con.setAutoCommit(false, autoCom -> {

                    JsonObject persona = message.body().copy();
                    persona.put("created_by", 1);
                    persona.remove("mascotas");

                    GenericCreate model
                            = this.generateGenericCreate(persona);

                    con.updateWithParams(model.getQuery(), model.getParams(), personaReply -> {
                        if (personaReply.succeeded()) {
                            // Insert mascotas
                            final int personId = personaReply.result().getKeys().getInteger(0);
                            JsonArray mascotas = message.body().getJsonArray("mascotas");
                            List<String> queries = new ArrayList<>();
                            for (int i = 0; i < mascotas.size(); i++) {
                                JsonObject mascota = mascotas.getJsonObject(i);
                                mascota.put("CC_persona_ID", personId);
                                mascota.put("created_by", 1);
                                queries.add(this.generateGenericCreate("CC_animal", mascota));
                            }

                            con.batch(queries, mascotasReply -> {
                                if (mascotasReply.succeeded()) {
                                    this.commit(con, message, new JsonObject().put("id", personId));
                                } else {
                                    this.rollback(con, mascotasReply.cause(), message);
                                }
                            });
                        } else {
                            // rollback
                            this.rollback(con, personaReply.cause(), message);
                        }
                    });
                });
            } else {
                // fallido
                reportQueryError(message, getCon.cause(), REGISTER);
            }
        });
    }

}
